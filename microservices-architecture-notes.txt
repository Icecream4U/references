##1##
-----
Microservices are ideal for big systems
Microservice architecture is goal-oriented
Microservices are focused on replaceability

At the end of our three-day meeting, one of us called out a theme—that year it had been clear that many of the problems people were facing in the wild were related to building systems that were too big. “How can I rebuild a part of this,” “best ways to implement Strangler,” etc.
Turning that on its head, the problem became “how can we build systems that are replaceable over being maintainable?”
We used the term micro apps, I seem to remember.
—James Lewis

Microservices are small, autonomous services that work together.
—Sam Newman, Thoughtworks

Loosely coupled service-oriented architecture with bounded contexts.
—Adrian Cockcroft, Battery Ventures

A microservice is an independently deployable component of bounded scope that supports interoperability through message-based communication.
Microservice architecture is a style of engineering highly automated, evolvable software systems made up of capability-aligned microservices.
-Martin Fowler

microservice applications share some important characteristics:
• Small in size
• Messaging enabled
• Bounded by contexts
• Autonomously developed
• Independently deployable
• Decentralized
• Built and released with automated processes

Speed and Safety at Scale and in Harmony.
—The Microservices Way

* Speed of Change: Most organizations have the platforms, tools, and infrastructure in place to implement thousands of application releases within a single day. But they don’t. In fact, most teams are happy if they can manage a release in a week. Why is that? The answer of course is that the real deterrent to release speed is the fragility of the software they’ve produced.
* Safety of Change: Every change is potentially a breaking change and a system optimized purely for speed is only realistic if the cost of breaking the system is near zero. Most development environments are optimized for release speed, enabling the software developer to make multiple changes in as short a time as possible. On the other hand, most production environments are optimized for safety, restricting the rate of change to those releases that carry the minimum risk of damage.
* At Scale: microservices style is rooted in the idea of solving the problems that arise when software gets too big. To build at scale means to build software that can continue to work when demand grows beyond our initial expectations. Systems that can work at scale don’t break when under pressure; instead they incorporate built-in mechanisms to increase capacity in a safe way.
* In Harmony: microservice architecture is not limited to a simple series of decisions regarding speed and safety of change. The microservices domain is actually fairly complex and will require you to understand a wide breadth of concepts that have a great depth of impact.

-----
##2##
-----
The greater the cohesion of individual modules in the system, the lower the coupling between modules will be.
—Larry Constantine and Edward Yourdon, authors of Structured Design: Funda‐ mentals of a Discipline of Computer Program and Systems Design

The key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be.
—Alan Kay, 1998 email to the Squeak-dev list (http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html)

Dealing with complex systems requires a careful approach based on influence versus control

-----
##3##
-----
The very first step of a service design process is to design the process itself.
—Marc Stickdorn, author of This is Service Design Thinking

Bad designers make assumptions about how a system works, apply changes in the hope that it will produce desired behavior, and call it a day. Good designers make small system changes, assess the impact of those changes, and continually prod the system behavior toward a desired outcome. But a good design process is predicated on your ability to get feedback from the system you are designing. This is actually much more difficult than it sounds—the impact of a change to one small part of the system may result in a ripple of changes that impact other parts of your system with low visibility.
Gain essential visibility into our system by identifying a few key measurements that give us the most valuable information about system behavior. In organizational design, this type of metric is known as a key performance indicator (KPI). The challenge for the microservice designer is to identify the right ones.
The risk of making poor decisions is that we steer the system in a direction that increases our “technical debt” (i.e., the future cost of addressing a technical defi‐ ciency). If we go too far along the wrong path we risk producing a system that becomes too expensive to change, so we give up.

The classic microservices example of this is the cautionary tale of the “monolith.” A team creates an initial release of an application when the feature set is small and the componentry has low complexity. Over time, the feature set grows and the complex‐ ity of the deployed application grows, making change ever more difficult. At this point, the team agrees that the application needs to be redesigned and modularized to improve its changeability. But the redesign work is continually deferred because the cost of that work is too high and difficult to justify.
At the other end of the scale is a system that is so overdesigned and overengineered for future flexibility that it becomes impractical. An incredibly complex, adaptable system that is built for massive amounts of change that never seems to happen.
So, in order to design a microservice system that is dynamic you’ll need to identify the right KPIs, be able to interpret the data, and make small, cheap changes to the system that can guide you back on the right course. This is only possible if the right organization, culture, processes, and system architecture are in place to make it cheap and easy to do so.



-----------
## Links ##
-----------
Links linked for shis book: https://github.com/apiacademy/MSABook

---------
## Cit ##
---------
Gall's Law: A complex system that works is invariably found to have evolved from a simple system that worked (which bring us to "Monolith first")

-----------
## Books ##
-----------
The End of Average by Todd Rose (Harper Collins, 2016). Rose has given a TEDx talk on the subject of averages and is a leading proponent of an interdisciplinary field called “The Science of the Individual”.

Structure in Fives by Henry Mintzberg (organizational designer)

