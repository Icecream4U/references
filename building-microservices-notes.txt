Strong cohesion and loose coupling

Any technology that pushes us to expose internal representation detail should be avoided. Share behaviour not representation.

Orchestration Versus Choreography

keep your middleware dumb, and keep the smarts in the endpoints

don’t violate DRY within a microservice, but be relaxed about violating DRY across all services. The evils of too much coupling between services are far worse than the problems caused by code duplication

----

Eventual consistency (local retry until it works) VS Distributed transaction (transaction manager -> 2 phase commit)

class-responsibility-collaboration (CRC) cards with services used as class

----

Avoid "configuration drift": the code in source control no longer reflects the configuration of the running host
We can resolve it with "Immutable servers"

----

A test suite with flaky tests can become a victim of what Diane Vaughan calls the normalization of deviance. The idea that over time we can become so accustomed to things being wrong that we start to accept them as being normal and not a problem 
(Diane Vaughan, The Challenger Launch Decision: Risky Technology, Culture, and Deviance at NASA (Chicago: University of Chicago Press, 1996))

The best balance I have found is to treat the end-to-end test suite as a shared codebase, but with joint ownership. Teams are free to check in to this suite, but the ownership of the health of the suite has to be shared between the teams developing the services themselves. If you want to make extensive use of end-to-end tests with multiple teams I think this approach is essential, and yet I have seen it done very rarely, and never without issue

Test Journeys, Not Stories -> Consumer driven Contracts

Using blue/green deployments to separate deployment from release: Deploy new versione -> run smoke test against it -> Redirect traffic

Canary releasing: we are verifying our newly deployed software by directing amounts of production traffic against the system to see if it performs as expected

-----------
## Links ##
-----------
DDD Bounded Context Explained: https://web.archive.org/web/20130101104734/http://www.sapiensworks.com/blog/post/2012/04/17/DDD-The-Bounded-Context-Explained.aspx

Richardson REST maturity model: https://martinfowler.com/articles/richardsonMaturityModel.html

Tolerant Reader: https://martinfowler.com/bliki/TolerantReader.html

Semantic versioning: https://semver.org/

Expand and contract pattern: https://martinfowler.com/bliki/ParallelChange.html

Strangler application pattern: https://martinfowler.com/bliki/StranglerFigApplication.html

Test doubles: https://www.martinfowler.com/bliki/TestDouble.html

Eradicating non determinism in tests: https://martinfowler.com/articles/nonDeterminism.html

Enterprise integration using REST: https://martinfowler.com/articles/enterpriseREST.html

-----------
## Books ##
-----------
REST in Practice (O’Reilly)

Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions (Addison Wesley)

Working Effectively with Legacy Code

Refactoring Databases by Scott J. Ambler and Pramod J. Sadalage (Addison-Wesley)

Continuous Delivery by Jez Humble and Dave Farley 

Agile Testing by Lisa Crispin and Janet Gregory

Succeeding with Agile by Mike Cohn

Growing Object-Oriented Software, Guided by Tests, by Steve Freeman and Nat Pryce

---------
## Cit ##
---------
Postel’s Law (otherwise known as the robustness principle): “Be conservative in what you do, be liberal in what you accept from others.” [https://tools.ietf.org/html/rfc761]

-----------
## Tools ##
-----------
Structure 101
Schema spy: http://schemaspy.sourceforge.net/
https://www.packer.io/

Mountebank for test doubles: http://www.mbtest.org/

Pact (consumer-driven testing tool): https://docs.pact.io/

