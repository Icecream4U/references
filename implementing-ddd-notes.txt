Implementing DDD by VV - Notes
------------------------------
Strategical Design && Tactical Design

Avoid Anemic Domain Model
- The Java Bean standard was originally specified to assist in the creation of visual programming tools for Java (configurations throught reflection)
- Hibernate was introduced to persist domain models
- avoid the impostor Application Service à la Transaction Script

Ubiquitous Language
- The Ubiquitous Language is a shared language developed by the team—a team composed of both domain experts and software developers.
- the Language is more centered on how the business itself thinks and operates
- team speech and the code will be the lasting expression of the Ubiquitous Language
- There is one Ubiquitous Language per Bounded Context 

How You Can Sell DDD to Your Boss
1. The organization gains a useful model of its domain.
   + we will deliver exactly what is needed to achieve competitive advantage
2. A refined, precise definition and understanding of the business is developed.
   + details can help your business analyze the value of the current and future direction, both strategic and tactical
3. Domain experts contribute to software design.
   + the chances of developing “tribal knowledge,” where only a select few understand the model, are reduced
4. A better user experience is gained.
   + software trains the users, which reduces the training overhead to the business
5. Clean boundaries are placed around pure models.
   + purity in direction allows for focus on the potency of the solution, with efforts directed to where they matter the most
6. Enterprise architecture is better organized.
   + the boundaries are explicit, and the relationships between them are as well. This can lead to a very thorough understanding of the entire enterprise architecture.
7. Agile, iterative, continuous modeling is used.
   + it is about carefully refining the mental model of domain experts into a useful model for the business. The model that is produced is the working software
8. New tools, both strategic and tactical, are employed.

Applying DDD
- speak with the domain experts
- designing the behaviors of objects (use the method changeStatus and remove the setter instead of using it to perform a status change)
- Whiteboard Time
   - Using the specific domain you currently work in, think of the common terms and actions of the model.
   - Write the terms on the board.
   - Next, write phrases that should be used by your team when you talk about the project.
   - Discuss them with a real domain expert to see how they could be refined (remember to bring the coffee)
- test-first approach (which also include show final code to domain experts to be certain that ubuquitous language was respected)

## Domain

- Core Domain: is a part of the business Domain that is of primary importance to the success of the organization. Strategically speaking, the business must excel with its Core Domain. It is of utmost importance to the ongoing success of the business. That project gets the highest priority, one or more domain experts with deep knowledge of that Subdomain, the best developers, and as much leeway and leverage as possible to give the close-knit team an unobstructed success path. Most of your DDD project efforts will be focused on the Core Domain.
- Supporting Subdomain and Generic Subdomain: sometimes a Bounded Context is created or acquired to support the business. If it models some aspect of the business that is essential, yet not Core, it is a Supporting Subdomain. The business creates a Supporting Subdomain because it is somewhat specialized. Otherwise, if it captures nothing special to the business, yet is required for the overall business solution, it is a Generic Subdomain. Being Supporting or Generic doesn’t mean unimportant. These kinds of Subdomains are important to the success of the business, yet there is no need for the business to excel in these areas.

- problem space: enables us to think of a strategic business challenge to be solved. Your problem space is the combination of the Core Domain and the Subdomains it must use. Subdomains allow us to rapidly view different parts of the Domain that are necessary to solve a specific problem
- solution space: focuses on how we will implement the software to solve the problem of the business challenge. The solution space is one or more Bounded Contexts, a set of specific software models. That’s because the Bounded Context is a specific solution, a realization view, once developed. The Bounded Context is used to realize a solution as software.

Bounded Context Is Explicit and Linguistic
A Bounded Context is an explicit boundary within which a domain model exists. Inside the boundary all terms and phrases of the Ubiquitous Language have specific meaning, and the model reflects the Language with exactness

## Context Mapping
DDD organizational and integration patterns
- Partnership: when teams in two Contexts will succeed or fail together, a cooperative relationship needs to emerge. Interdependent features should be scheduled so that they are completed for the same release
- Shared Kernel: Sharing part of the model and associated code forms a very intimate interdependency, which can leverage design work or undermine it. Define a continuous integration process that will keep the kernel model tight and align the Ubiquitous Language of the teams
- Customer-Supplier Development: when two teams are in an upstream-downstream relationship, where the upstream team may succeed interdependently of the fate of the downstream team, the needs of the downstream team come to be addressed in a variety of ways with a wide range of consequences. Downstream priorities factor into upstream planning. Negotiate and budget tasks for downstream requirements so that everyone understands the commitment and schedule
- Conformist: When two development teams have an upstream/downstream relationship in which the upstream team has no motivation to provide for the downstream team’s needs, the downstream team is helpless. Altruism may motivate upstream developers to make promises, but they are unlikely to be fulfilled. The downstream team eliminates the complexity of translation between bounded contexts by slavishly adhering to the model of the upstream team
- Anticorruption Layer: Translation layers can be simple, even elegant, when bridging well-designed Bounded Contexts with cooperative teams. But when control or communication is not adequate to pull off a shared kernel, partner, or customer-supplier relationship, translation becomes more complex. The translation layer takes on a more defensive tone. As a downstream client, create an isolating layer to provide your system with functionality of the upstream system in terms of your own domain model. This layer talks to the other system through its existing interface, requiring little or no modification to the other system. Internally, the layer translates in one or both directions as necessary between the two models
- Open Host Service: Define a protocol that gives access to your subsystem as a set of services. Open the protocol so that all who need to integrate with you can use it. Enhance and expand the protocol to handle new integration requirements, except when a single team has idiosyncratic needs. Then, use a one-off translator to augment the protocol for that special case so that the shared protocol can stay simple and coherent.
- Published Language: The translation between the models of two Bounded Contexts requires a common language. Use a well-documented shared language that can express the necessary domain information as a common medium of communication, translating as necessary into and out of that language. Published Language is often combined with Open Host Service
- Separate Ways: We must be ruthless when it comes to defining requirements. If two sets of functionality have no significant relationship, they can be completely cut loose from each other. Integration is always expensive, and sometimes the benefit is small. Declare a bounded context to have no connection to the others at all, enabling developers to find simple, specialized solutions within this small scope
- Big Ball of Mud: As we survey existing systems, we find that, in fact, there are parts of systems, often large ones, where models are mixed and boundaries are inconsistent. Draw a boundary around the entire mess and designate it a Big Ball of Mud. Do not try to apply sophisticated modeling within this Context. Be alert to the tendency for such systems to sprawl into other Contexts


-------------------------------
### Refs
Anemic Domain Model - https://martinfowler.com/bliki/AnemicDomainModel.html
Strategic Domain Driven Design with Context Mapping - https://www.infoq.com/articles/ddd-contextmapping/

### Links
https://www.dddcommunity.org/#DDD

